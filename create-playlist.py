import argparse
import csv
import functools
import os
import sys

import requests

OAUTH_TOKEN = os.getenv('OAUTH_TOKEN')

ENDPOINTS = {
    'search': 'https://api.spotify.com/v1/search',
    'top-tracks': 'https://api.spotify.com/v1/artists//top-tracks',
}


def headers(oauth_token):
    return {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {oauth_token}'
    }


def create_playlist(name):
    # TODO: finish this once Spotify endpoint works
    requests.post(
        'https://api.spotify.com/v1/playlists',
        data={
            'name': name,
            'description': 'Playlist generated by create-playlist.py',
            'public': 'false',
        })


def add_tracks_to_playlist(playlist_id, top_track_uri_and_name):
    params = {
        'uris': ','.join(top_track_uri_and_name[0])
    }
    resp = requests.post(
        f'https://api.spotify.com/v1/playlists/{playlist_id}/tracks',
        headers=headers(OAUTH_TOKEN),
        params=params,
    )
    song_name_list = '\n'.join(top_track_uri_and_name[1])

    if resp.status_code != 201:
        sys.stderr.write(f'Unable to add to playlist: {playlist_id}\n\n{song_name_list}')
    else:
        song_name_list = '\n'.join(top_track_uri_and_name[1])
        print(f'Successfully added to playlist: {playlist_id}\n\n{song_name_list}\n\n')


@functools.lru_cache(maxsize=128)
def artist_id(artist_name):
    params = {
        'q': artist_name,
        'type': 'artist',
        'market': 'US',
        'limit': '5',
        'offset': '0',
    }

    r = requests.get(ENDPOINTS['search'], params=params, headers=headers(OAUTH_TOKEN))
    resp = r.json()

    max_num_followers = -1
    most_popular_artist_index = -1

    if 'artists' not in resp:
        sys.stderr.write(f'Skipping artist: {artist_name}\n')
        return

    for i, artist in enumerate(resp['artists']['items']):
        num_followers = artist['followers']['total']
        if num_followers > max_num_followers:
            max_num_followers = num_followers
            most_popular_artist_index = i

    if most_popular_artist_index >= 0:
        artist_metadata = resp['artists']['items'][most_popular_artist_index]
        uri = artist_metadata['uri']
        aid = uri.split(':')[2]
        return aid
    return None


def artist_top_n_tracks(artist_id, n=1):
    params = {
        'country': 'US',
    }

    r = requests.get(f'https://api.spotify.com/v1/artists/{artist_id}/top-tracks', params=params, headers=headers(OAUTH_TOKEN))
    resp = r.json()

    # It's possible the artist has fewer than n tracks.
    if 'tracks' not in resp:
        return [], []

    track_uris = [resp['tracks'][i]['uri'] for i in range(min(n, len(resp['tracks'])))]
    track_names = [resp['tracks'][i]['name'] for i in range(min(n, len(resp['tracks'])))]
    return track_uris, track_names


def run():
    parser = argparse.ArgumentParser(description='Create a Spotify playlist based on a list of artists.')
    parser.add_argument('playlist_id', type=str, help='Spotify playlist ID')
    parser.add_argument('filename', type=str, help='path to CSV file of artist names')
    parser.add_argument('N', type=int, help='number of top Spotify tracks per artist to add to the playlist')
    args = parser.parse_args()

    playlist_id = args.playlist_id
    n = args.N
    filename = args.filename
    if not os.path.exists(filename):
        sys.exit(f"Unable to find file: {filename}")

    with open(filename, 'r') as f:
        artist_ids = [artist_id(row[0]) for row in csv.reader(f) if artist_id(row[0])]
        for aid in artist_ids:
            track_uris, track_names = artist_top_n_tracks(aid, n)
            add_tracks_to_playlist(playlist_id, (track_uris, track_names))


if __name__ == '__main__':
    run()
